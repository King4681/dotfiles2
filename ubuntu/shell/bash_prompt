#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

enable_color_support() {

    if [[ $COLORTERM == gnome-* && $TERM == xterm ]] \
        && infocmp gnome-256color &> /dev/null; then
        export TERM="gnome-256color"
    elif infocmp xterm-256color &> /dev/null; then
        export TERM="xterm-256color"
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Load OS specific color support.

    . "colors/$OS/bash_colors"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# [!] Don't break this function into smaller, more specialized ones
# as you will only pollute the global space even more. This function
# cannot be unset because it's called every time the prompt string
# is shown.

get_git_repository_details() {

    local branchName=""
    local tmp=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if the current directory is in a Git repository.

    ! git rev-parse &>/dev/null \
        && return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if in `.git/` directory (some of the following
    # checks don't make sense/won't work in the `.git` directory).

    [ "$(git rev-parse --is-inside-git-dir)" == "true" ] \
        && return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for uncommitted changes in the index.

    if ! git diff --quiet --ignore-submodules --cached; then
        tmp="$tmp+";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for unstaged changes.

    if ! git diff-files --quiet --ignore-submodules --; then
        tmp="$tmp!";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for untracked files.

    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        tmp="$tmp?";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check for stashed files.

    if git rev-parse --verify refs/stash &>/dev/null; then
        tmp="$tmp$";
    fi

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    [ -n "$tmp" ] \
        && tmp=" [$tmp]"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    branchName="$( printf "%s" "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
        || git rev-parse --short HEAD 2> /dev/null \
        || printf " (unknown)" )" | tr -d "\n" )"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    printf "%s" "$1$branchName$tmp"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set_prompts() {

    # set variable identifying the chroot you work in (used in the prompt below)
    if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
        debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color|*-256color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    #force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
        else
        color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
    *)
        ;;
    esac

    # enable color support of ls and also add handy aliases
    if [ -x /usr/bin/dircolors ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
        alias ls='ls --color=auto'

    fi

    # colors!
    green="\[\033[0;32m\]"
    blue="\[\033[0;34m\]"
    purple="\[\033[0;35m\]"
    reset="\[\033[0m\]"

    export GIT_PS1_SHOWDIRTYSTATE=1
    # '\u' adds the name of the current user to the prompt
    # '\$(__git_ps1)' adds git-related stuff
    # '\W' adds the name of the current directory
    export PS1="$purple\u$green\$(__git_ps1)$blue \W $ $reset"

    # local bold=$(tput bold 2> /dev/null)
    # local reset=$(tput sgr0 2> /dev/null)

    # local cyan=""
    # local green=""
    # local orange=""
    # local white=""
    # local yellow=""

    # # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # if [ "$(tput colors 2> /dev/null || printf "0")" -ge 256 ]; then

    #     # Solarized colors.
    #     # https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values

    #     cyan=$(tput setaf 37)
    #     green=$(tput setaf 64)
    #     orange=$(tput setaf 166)
    #     white=$(tput setaf 15)
    #     yellow=$(tput setaf 136)

    # fi

    # # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # # Prompt Statement variables.
    # # http://ss64.com/bash/syntax-prompt.html

    # # ------------------------------------------------------------------
    # # | PS1 - Default interactive prompt                               |
    # # ------------------------------------------------------------------

    # PS1="\[\033]0;\W\007\]" # Terminal title (set to the
    #                         # current working directory)

    # PS1+="$reset$bold"
    # PS1+="$orange\u"        # Username
    # PS1+="$white@"
    # PS1+="$yellow\h"        # Host
    # PS1+="$white: "
    # PS1+="$green\w"         # Working directory
    # PS1+="\$(get_git_repository_details \"$white on $cyan\")"
    # PS1+="\n"
    # PS1+="\[$reset\]\[$white\]$ \[$reset\]"

    # export PS1

    # # ------------------------------------------------------------------
    # # | PS2 - Continuation interactive prompt                          |
    # # ------------------------------------------------------------------

    # PS2="⚡ "

    # export PS2

    # # ------------------------------------------------------------------
    # # | PS4 - Debug prompt                                             |
    # # ------------------------------------------------------------------

    # # e.g:
    # #
    # # The GNU `date` command has the `%N` interpreted sequence while
    # # other implementations don't (on macOS `gdate` can be used instead
    # # of the native `date` if the `coreutils` package has been installed).
    # #
    # # local dateCmd=""
    # #
    # # if [ "$(date +%N)" != "N" ] || \
    # #    [ ! -x "$(command -v "gdate")" ]; then
    # #    dateCmd="date +%s.%N"
    # # else
    # #    dateCmd="gdate +%s.%N"
    # # fi
    # #
    # # PS4="+$( tput cr && tput cuf 6 &&
    # #          printf "$yellow %s $green%6s $reset" "$($dateCmd)" "[$LINENO]" )"
    # #
    # # PS4 output:
    # #
    # #   ++    1357074705.875970000  [123] '[' 1 == 0 ']'
    # #   └──┬─┘└────┬───┘ └───┬───┘ └──┬─┘ └──────┬─────┘
    # #      │       │         │        │          │
    # #      │       │         │        │          └─ command
    # #      │       │         │        └─ line number
    # #      │       │         └─ nanoseconds
    # #      │       └─ seconds since 1970-01-01 00:00:00 UTC
    # #      └─ depth-level of the subshell

    # PS4="+$( tput cr 2> /dev/null;
    #          tput cuf 6 2> /dev/null;
    #          printf "%s" "$reset" )"

    # export PS4

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

main() {
    enable_color_support
    set_prompts
}

main

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Cleanup.

unset -f enable_color_support
unset -f main
unset -f set_prompts
